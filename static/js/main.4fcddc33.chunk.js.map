{"version":3,"sources":["components/Layout/Layout.js","components/Feedbacks/Section.js","components/Feedbacks/FeedbackOptions.js","components/Feedbacks/Statistics.js","components/Feedbacks/Notification.js","components/Feedbacks/Feedbacks.js","index.js","components/App.js"],"names":["Layout","children","className","Section","title","FeedbackOptions","options","onLeaveFeedback","map","e","type","name","onClick","toUpperCase","Statistics","good","neutral","bad","total","positivePercentage","Notification","message","Feedbacks","state","increaseValue","value","target","setState","countTotalFeedback","countPositiveFeedbackPercentage","positive","Math","floor","this","Object","keys","Component","defaultProps","ReactDOM","render","document","getElementById"],"mappings":"6MAKeA,G,MAFA,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAAkB,yBAAKC,UAAU,UAAUD,K,0CCD3C,SAASE,EAAT,GAAuC,IAApBC,EAAmB,EAAnBA,MAAOH,EAAY,EAAZA,SACvC,OACE,6BACE,uBAAGC,UAAU,SAASE,GACrBH,GCHQ,SAASI,EAAT,GAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBACjD,OACE,oCACGD,EAAQE,KAAI,SAAAC,GAAC,OACZ,4BAAQC,KAAK,SAASC,KAAMF,EAAGG,QAASL,GACrCE,EAAEI,mBCLE,SAASC,EAAT,GAMX,IALFC,EAKC,EALDA,KACAC,EAIC,EAJDA,QACAC,EAGC,EAHDA,IACAC,EAEC,EAFDA,MACAC,EACC,EADDA,mBAEA,OACE,oCACE,oCAAUJ,GACV,uCAAaC,GACb,mCAASC,GACT,qCAAWC,GACX,iDAAuBC,EAAvB,MCbS,SAASC,EAAT,GAAoC,IAAZC,EAAW,EAAXA,QACrC,OAAO,2BAAIA,G,ICEPC,E,2MAKJC,MAAQ,CACNR,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPO,cAAgB,SAAAf,GACd,IAAMgB,EAAQhB,EAAEiB,OAAOf,KACvB,EAAKgB,SAAL,eACGF,EAAQ,EAAKF,MAAME,GAAS,K,EAIjCG,mBAAqB,WAEnB,OADc,EAAKL,MAAMR,KAAO,EAAKQ,MAAMP,QAAU,EAAKO,MAAMN,K,EAIlEY,gCAAkC,WAChC,IAAMC,EAAW,EAAKP,MAAMR,KACtBG,EAAQ,EAAKU,qBACnB,OAAiB,IAAVV,EAAc,EAAIa,KAAKC,MAAOF,EAAWZ,EAAS,M,wEAIzD,IAAMA,EAAQe,KAAKL,qBACbT,EAAqBc,KAAKJ,kCAEhC,OACE,6BACE,kBAAC1B,EAAD,CAASC,MAAM,yBACb,kBAACC,EAAD,CACEC,QAAS4B,OAAOC,KAAKF,KAAKV,OAC1BhB,gBAAiB0B,KAAKT,iBAGzBN,EAAQ,EACP,kBAACf,EAAD,CAASC,MAAM,eACb,kBAACU,EAAD,CACEC,KAAMkB,KAAKV,MAAMR,KACjBC,QAASiB,KAAKV,MAAMP,QACpBC,IAAKgB,KAAKV,MAAMN,IAChBC,MAAOA,EACPC,mBAAoBA,KAIxB,kBAACC,EAAD,CAAcC,QAAS,2B,GApDTe,aAAlBd,EACGe,aAAe,GA0DTf,QC7DfgB,IAASC,OAAO,mBCCD,WACb,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,SDJU,MAASC,SAASC,eAAe,U","file":"static/js/main.4fcddc33.chunk.js","sourcesContent":["import React from 'react';\nimport './Layout.css';\n\nconst Layout = ({ children }) => <div className=\"Layout\">{children}</div>;\n\nexport default Layout;","import React from 'react';\n\nexport default function Section({ title, children }) {\n  return (\n    <div>\n      <p className=\"title\">{title}</p>\n      {children}\n    </div>\n  );\n}","import React from 'react';\nimport T from 'prop-types';\n\nexport default function FeedbackOptions({ options, onLeaveFeedback }) {\n  return (\n    <>\n      {options.map(e => (\n        <button type=\"button\" name={e} onClick={onLeaveFeedback}>\n          {e.toUpperCase()}\n        </button>\n      ))}\n    </>\n  );\n}\n\nFeedbackOptions.propTypes = {\n  options: T.arrayOf(T.string).isRequired,\n  onLeaveFeedback: T.func.isRequired,\n}","import React from 'react';\nimport T from 'prop-types';\n\nexport default function Statistics({\n  good,\n  neutral,\n  bad,\n  total,\n  positivePercentage,\n}) {\n  return (\n    <>\n      <p>Good: {good}</p>\n      <p>Neutral: {neutral}</p>\n      <p>Bad: {bad}</p>\n      <p>Total: {total}</p>\n      <p>Positive feedback: {positivePercentage}%</p>\n    </>\n  );\n}\n\nStatistics.propTypes = {\n  good: T.number.isRequired,\n  neutral: T.number.isRequired,\n  bad: T.number.isRequired,\n  total: T.number.isRequired,\n  positivePercentage: T.number.isRequired,\n}","import React from 'react';\nimport T from 'prop-types';\n\nexport default function Notification({ message }) {\n  return <p>{message}</p>;\n}\n\nNotification.propTypes = {\n  message: T.string.isRequired,\n}","import React, { Component } from 'react';\nimport Section from './Section';\nimport FeedbackOptions from './FeedbackOptions';\nimport Statistics from './Statistics';\nimport Notification from './Notification';\n\nclass Feedbacks extends Component {\n  static defaultProps = {};\n\n  static propTypes = {};\n\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  increaseValue = e => {\n    const value = e.target.name;\n    this.setState({\n      [value]: this.state[value] + 1,\n    });\n  };\n\n  countTotalFeedback = () => {\n    const total = this.state.good + this.state.neutral + this.state.bad;\n    return total;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const positive = this.state.good;\n    const total = this.countTotalFeedback();\n    return total === 0 ? 0 : Math.floor((positive / total) * 100);\n  };\n\n  render() {\n    const total = this.countTotalFeedback();\n    const positivePercentage = this.countPositiveFeedbackPercentage();\n\n    return (\n      <div>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={Object.keys(this.state)}\n            onLeaveFeedback={this.increaseValue}\n          />\n        </Section>\n        {total > 0 ? (\n          <Section title=\"Statistics:\">\n            <Statistics\n              good={this.state.good}\n              neutral={this.state.neutral}\n              bad={this.state.bad}\n              total={total}\n              positivePercentage={positivePercentage}\n            />\n          </Section>\n        ) : (\n          <Notification message={'No feedback given'} />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Feedbacks;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","import React from 'react';\nimport Layout from './Layout';\nimport Feedbacks from './Feedbacks';\n\n\nexport default function App() {\n  return (\n    <Layout>\n      <Feedbacks />\n    </Layout>\n  );\n  }"],"sourceRoot":""}